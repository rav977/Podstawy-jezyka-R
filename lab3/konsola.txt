R version 4.2.0 (2022-04-22 ucrt) -- "Vigorous Calisthenics"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Workspace loaded from ~/.RData]

> library("neuralnet")
> 
> normalize <- function(x) {
+     return ((x - min(x)) / (max(x) - min(x)))
+ }
> 
> argument <-as.data.frame(runif(100, min = 1, max = 3))
> wynik_funkcji <- sin(argument^2)
> 
> argument
    runif(100, min = 1, max = 3)
1                       2.790810
2                       1.131959
3                       1.034335
4                       2.967794
5                       1.514161
6                       2.163982
7                       2.417149
8                       2.903019
9                       2.275337
10                      2.392002
11                      1.577465
12                      2.815652
13                      1.631465
14                      2.209914
15                      1.729381
16                      2.672094
17                      2.296387
18                      2.550394
19                      2.979610
20                      2.223211
21                      2.937929
22                      2.709043
23                      2.732268
24                      2.878319
25                      1.411049
26                      1.734685
27                      2.536395
28                      1.149319
29                      1.452699
30                      1.713148
31                      1.108817
32                      2.390256
33                      2.190476
34                      1.869529
35                      2.181642
36                      2.036447
37                      2.158816
38                      2.342111
39                      2.870483
40                      2.135382
41                      2.303664
42                      2.691446
43                      1.702238
44                      1.010008
45                      1.507259
46                      1.648095
47                      2.695268
48                      2.370653
49                      1.568138
50                      1.803000
51                      2.568692
52                      1.618045
53                      2.797606
54                      2.930988
55                      2.504340
56                      2.498105
57                      1.878833
58                      1.905854
59                      2.610771
60                      2.452823
61                      2.575929
62                      2.637381
63                      1.714574
64                      2.233272
65                      1.845202
66                      2.493951
67                      1.918754
68                      2.210694
69                      2.824577
70                      1.584787
71                      2.589392
72                      1.433598
73                      1.608801
74                      1.878913
75                      2.924785
76                      1.020081
77                      2.997633
78                      2.036695
79                      1.757573
80                      2.589470
81                      2.796363
82                      2.931169
83                      1.360322
84                      1.576630
85                      1.401409
86                      2.652302
87                      1.177367
88                      2.700830
89                      1.643839
90                      2.143585
91                      1.681316
92                      2.874617
93                      2.437071
94                      2.349098
95                      1.487738
96                      2.443355
97                      1.834659
98                      2.341179
99                      2.844505
100                     2.155530
> wynik_funkcji
    runif(100, min = 1, max = 3)
1                     0.99786480
2                     0.95839666
3                     0.87712756
4                     0.57857367
5                     0.75056092
6                    -0.99956284
7                    -0.42646195
8                     0.83998540
9                    -0.89392465
10                   -0.53246731
11                    0.60772813
12                    0.99726953
13                    0.46170473
14                   -0.98535898
15                    0.15026194
16                    0.75581770
17                   -0.84672045
18                    0.21952213
19                    0.51987336
20                   -0.97360340
21                    0.71270626
22                    0.87026018
23                    0.92540611
24                    0.90865826
25                    0.91298138
26                    0.13207329
27                    0.14955322
28                    0.96894654
29                    0.85794552
30                    0.20524697
31                    0.94231358
32                   -0.53951704
33                   -0.99632176
34                   -0.34622574
35                   -0.99888747
36                   -0.84444196
37                   -0.99865344
38                   -0.71575209
39                    0.92653768
40                   -0.98838927
41                   -0.82844083
42                    0.81959154
43                    0.24156634
44                    0.85216874
45                    0.76417551
46                    0.41266398
47                    0.83121339
48                   -0.61563194
49                    0.63076366
50                   -0.10899916
51                    0.30981245
52                    0.49993429
53                    0.99962518
54                    0.74068494
55                   -0.01146501
56                   -0.04264129
57                   -0.37872829
58                   -0.47123336
59                    0.50806872
60                   -0.26369056
61                    0.34498646
62                    0.62301721
63                    0.20046142
64                   -0.96239441
65                   -0.26015185
66                   -0.06335028
67                   -0.51415693
68                   -0.98476500
69                    0.99229015
70                    0.58917951
71                    0.40936965
72                    0.88495141
73                    0.52554219
74                   -0.37900394
75                    0.76459268
76                    0.86269052
77                    0.42501342
78                   -0.84498263
79                    0.05250587
80                    0.40974056
81                    0.99941057
82                    0.73997135
83                    0.96114359
84                    0.60981675
85                    0.92370639
86                    0.68275050
87                    0.98300921
88                    0.84751985
89                    0.42538479
90                   -0.99311255
91                    0.30959540
92                    0.91734279
93                   -0.33713335
94                   -0.69248379
95                    0.80055942
96                   -0.30810820
97                   -0.22250184
98                   -0.71879278
99                    0.97199331
100                  -0.99781750
> 
> scaled.argument <- as.data.frame(lapply(argument, normalize))
> scaled.argument
    runif.100..min...1..max...3.
1                    0.895944953
2                    0.061355163
3                    0.012239073
4                    0.984987626
5                    0.253645778
6                    0.580579557
7                    0.707950936
8                    0.952398857
9                    0.636603687
10                   0.695299200
11                   0.285495107
12                   0.908443218
13                   0.312662963
14                   0.603688283
15                   0.361926126
16                   0.836217358
17                   0.647194313
18                   0.774988437
19                   0.990932549
20                   0.610378121
21                   0.969962542
22                   0.854806937
23                   0.866491837
24                   0.939971621
25                   0.201769144
26                   0.364594565
27                   0.767945529
28                   0.070089243
29                   0.222723867
30                   0.353759055
31                   0.049712364
32                   0.694420683
33                   0.593908951
34                   0.432436168
35                   0.589464677
36                   0.516414785
37                   0.577980530
38                   0.670198594
39                   0.936029603
40                   0.566190309
41                   0.650855241
42                   0.845953647
43                   0.348269830
44                   0.000000000
45                   0.250173667
46                   0.321029773
47                   0.847876629
48                   0.684558565
49                   0.280802371
50                   0.398964667
51                   0.784194607
52                   0.305911431
53                   0.899364153
54                   0.966470057
55                   0.751818152
56                   0.748681371
57                   0.437117409
58                   0.450712124
59                   0.805364972
60                   0.725898994
61                   0.787835340
62                   0.818752782
63                   0.354476382
64                   0.615440003
65                   0.420197303
66                   0.746591288
67                   0.457202066
68                   0.604080879
69                   0.912933669
70                   0.289178846
71                   0.794608556
72                   0.213113668
73                   0.301260589
74                   0.437157288
75                   0.963349549
76                   0.005068033
77                   1.000000000
78                   0.516539561
79                   0.376109743
80                   0.794648054
81                   0.898738577
82                   0.966561159
83                   0.176247820
84                   0.285075165
85                   0.196919078
86                   0.826259640
87                   0.084200604
88                   0.850674492
89                   0.318888554
90                   0.570317267
91                   0.337744128
92                   0.938109371
93                   0.717974108
94                   0.673713496
95                   0.240352274
96                   0.721135452
97                   0.414892599
98                   0.669729797
99                   0.922959520
100                  0.576327064
> 
> dane_treningowe <- cbind(scaled.argument, wynik_funkcji)
> colnames(dane_treningowe) <- c("Argument", "Wynik_funkcji")
> 
> net.price <- neuralnet(Wynik_funkcji~Argument, dane_treningowe, hidden = c(3, 2), threshold = 0.01)
> 
> plot(net.price)
> 
> 